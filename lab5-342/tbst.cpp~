#ifndef TBST_CPP
#define TBST_CPP

#include <stdio.h>
#include <assert.h>
#include <new>      // catching bad_alloc

bool debug = true;

// some constants

/******************************** Iterator *******************************/

/**
 * @details Default constructors. Creates an iterator standing at the specified
 *          Node. If non is specified, defaults to root.
 * 
 * @param home  the Node at which the iterator will be positioned
 * @return      An Iterator object at the specified location in the tree.
 */
TBST::Iterator::Iterator(Node* node, TBST* tree) {
    currentPtr = node;
    tree = tree;
}

TBST::Iterator::~Iterator() {
    currentPtr = NULL;
    tree = NULL;
}

/**
 * overloaded post-fix operator++. Advances the iterator to the next item.
 *
 * @param       dummy dummy int param to overload post-fix
 * @return      `copy = *this` by value to increment *this without
 *                     affecting the value on the RHS of y = x++
 */
TBST::Iterator TBST::Iterator::operator++(int dummy) {
    Iterator copy(*this);
    // modify *this
    assert(currentPtr != NULL);
    if(currentPtr->hasRightChild()) {
        currentPtr = currentPtr->getRight();
        while( currentPtr != NULL && currentPtr->hasLeftChild() )
            currentPtr = currentPtr->getLeft();
    } else {
        currentPtr = currentPtr->getRight();
    }
    return copy;
}

/**
 * overloaded pre-fix operator++. Advances the iterator to the next item.
 *
 * @return      *this by reference to support composite function calls
 */
TBST::Iterator& TBST::Iterator::operator++() {
    assert(currentPtr != NULL);
    if(currentPtr->hasRightChild()) {
        currentPtr = currentPtr->getRight();
        while( currentPtr != NULL && currentPtr->hasLeftChild() )
            currentPtr = currentPtr->getLeft();
        assert(currentPtr != NULL);
    } else {
        currentPtr = currentPtr->getRight();
    }
    return *this;
}

/**
 * @brief Checks if two iterators are at the same spot
 * 
 * @param other A separate iterator that potentially points to the same Node.
 * @return `true` if both iterators point to the same Node, `false` otherwise.
 */
bool TBST::Iterator::operator!=(TBST::Iterator other) {
    return (currentPtr != other.currentPtr);
}

/**
 * retrieve the Node pointer at the current position
 *
 * @return  pointer to current Node
 */
Node* TBST::Iterator::getCurrentNode() {
    return currentPtr;
}

bool TBST::Iterator::removeCurrentNode() {
    Node* temp = currentPtr;
    ++(*this);
    return tree->remove(temp->getData()->getToken());
}



/****************************** TBST ***********************************/

// **************** ITERATORS
/**
 * returns an iterator standing at the beginning of the tree
 * O(logn) running time.
 * 
 * @return Iterator object pointing at the minimum node (begin of inorder)
 */
TBST::Iterator TBST::begin() {
    Node* temp = root;
    while(temp->hasLeftChild()) {
        temp = temp->getLeft();
    }
    Iterator begin(temp, this);
    return begin;
}

/**
 * @brief   Acts as reference point of the end of an inorder iteration
 * through the tree.
 *  
 * @return  Iterator object pointing to a Node not part of the tree as the
 *          outside world knows of it. This Node serves simply to signify
 *          the end of the tree's inorder traversal.
 */
TBST::Iterator TBST::end() {
    Iterator end(NULL, this);
    return end;
}

// **************** CONSTRUCTORS/DESTRUCTOR
/**
 * @brief default constructor
 * @details creates an empty TBST
 */
TBST::TBST() {
    root = NULL;
    nodeCount = 0;
}

/** NOT DONE
 * @brief copy constructor
 * @details creates a copy of the passed in TBST
 * 
 * @param other TBST tree to copy
 */
TBST::TBST(const TBST& other) {
    root = NULL;
    nodeCount = 0;
    if(other.root != NULL) {
        // handle root separately
        assert(root == NULL); // make sure that tree is empty
        // then add the root
        NodeData* rootData = other.root->getData();
        insert(rootData->getToken(), rootData->getCount());

        // recursively copy the left and right subtrees
        recursiveCopy(other.root->getLeft());
        recursiveCopy(other.root->getRight());
    }
    else {
        root = NULL;
    }
}

/**
 * @brief destructor
 * @details releases all TBST Nodes' memory
 */
TBST::~TBST() {
    recursiveDelete(root);
    root = NULL;
}

// **************** PUBLIC METHODS
/**
 * @brief inserts a value into the TBST
 * @details inserts a value into the TBST, adding a new entry
 * if one does not already exist, and incrementing the entry
 * if it does exist. Running time O(logn).
 * 
 * @param token entry value to add/increment
 * @return `true` if insertion is successful, `false` otherwise.
 *                Insertion fails when new entry is equal to a parent
 *                with 2 children.
 */
bool TBST::insert(string token, int frequency) {
    if (this->root == NULL) {
        try {
            root = new Node(token, frequency);
            nodeCount++;
            return true;
        } catch (std::bad_alloc& ba) {
            if(debug)
                cout << "DEBUG: FAILED to allocate memory for Node" << endl;
            return false;
        }
    } else {
        return insert(this->root, token, frequency);
    }
}

/**
 * @brief removes an entry from the TBST
 * @details removes the specified entry from the TBST if
 * it exists, and restructures the tree. Running time O(logn).
 * 
 * @param token entry value to remove
 * @return true if the entry is found and removed
 * otherwise false.
 */
bool TBST::remove(string token) {
    if (root != NULL && root->getData()->getToken() == token) {
        return removeRoot();
    } else if (root != NULL) {
        return remove(root, token);
    } else {
        return false;
    }
}

bool TBST::removeRoot() {
    // Root is leaf
    if (root->isLeaf()) {
        delete root;
        root = NULL;
    // Root has left
    } else if (root->getLeft() != NULL && root->getRight() == NULL) {
        Node* temp = root->getLeft();
        delete root;
        root = temp;
        while (temp->hasRightChild()) {
            temp = temp->getRight();
        }
        temp->setRight(NULL, true);
    // Root has right
    } else if (root->getLeft() == NULL && root->getRight() != NULL) {
        Node* temp = root->getRight();
        delete root;
        root = temp;
        while (temp->hasLeftChild()) {
            temp = temp->getLeft();
        }
        temp->setLeft(NULL, true);
    // Root has both
    } else {
        // cout << *(parent->getLeft()->getData()) << endl;
        // assert(1 ==2);
        Node* temp = root;
        Node* temp2 = temp->getRight();
        while (temp2->hasLeftChild()) {
            temp2 = temp2->getLeft();
        }
        // If we moved temp2
        if (*(temp->getRight()) != *temp2) {
            // If temp2 doesn't have right children
            if (!temp2->hasRightChild()) {
                temp2->getRight()->setLeft(temp2, true);
            // Go to temp2's parent and set to temp2's child
            } else {
                Node* temp3 = temp2->getRight();
                while (temp3->hasRightChild()) {
                    temp3 = temp3->getRight();
                }
                temp3 = temp3->getRight();
                temp3->setLeft(temp2->getRight(), false);
            }
            // replace temp with temp2 (right side)
            temp2->setRight(temp->getRight(), false);
        }
        // repalce temp with temp2 (left side)
        temp2->setLeft(temp->getLeft(), false);
        root = temp2;
        Node* temp3 = temp2->getLeft();
        while (temp3->hasRightChild()) {
            temp3 = temp3->getRight();
        }
        temp3->setRight(temp2, true);
        delete temp;
        temp = NULL;
        return true;
    }
    nodeCount--;
    return true;
}

/**
 * @brief checks to see if an entry is in the TBST
 * @details checks to see if the specified entry is in 
 * the TBST tree. Running time O(logn).
 * 
 * @param token entry to look for
 * @return returns true if the entry is found
 * otherwise false.
 */
bool TBST::contains(string token) {
    return contains(root, token);
}

/**
 * @brief checks for emptiness
 * @details checks to see if the TBST contains entries.
 * 
 * @return returns `true` if the TBST is empty
 * otherwise `false`.
 */
bool TBST::isEmpty() const {
    return root == NULL;
}

/**
 * Processes the TBST in pre-order, applying the specified function at
 * each Node. Defaults to print(), starting at root.
 *     
 * 
 * @param func  function to apply to each Node pointer along the
 *              traversal path.
 *              Design this function with only a single Node pointer in mind.
 * @param cur   pointer to Node at which to process and start recursion on.
 */
void TBST::preOrder(void (*func)(Node*), Node* cur) {
    if(cur != NULL) {
        func(cur);
        preOrder(func, cur->getLeft());
        preOrder(func, cur->getRight());
    }
}

/**
 * Processes the TBST in in-order, applying the specified function at
 * each Node. Defaults to print(), starting at root.
 * 
 * @param func  function to apply to each Node pointer along the traversal path.
 *              Design this function with only a single Node pointer in mind.
 * @param cur   pointer to Node at which to process and start recursion on.
 */
void TBST::inOrder(void (*func)(Node*), Node* cur) {
    if(cur != NULL) {
        inOrder(func, cur->getLeft());
        func(cur);
        inOrder(func, cur->getRight());
    }
}

/**
 * Processes the TBST in post-order, applying the specified function at
 * each Node. Defaults to print(), starting at root.
 * 
 * @param func  function to apply to each Node pointer along the traversal path.
 *              Design this function with only a single Node pointer in mind.
 * @param cur   pointer to Node at which to process and start recursion on.
 */
void TBST::postOrder(void (*func)(Node*), Node* cur) {
    if(cur != NULL) {
        postOrder(func, cur->getLeft());
        postOrder(func, cur->getRight());
        func(cur);
    }
}

/**
 * @brief functional programming implementation of BST recursive traversal
 * @details This method traverses the tree starting at the Node specified,
 *          applying the function `func` specified, in the order specified.
 * @pre     If no order is specified or if specified order is invalid,
 *          traverses in-order.
 * 
 * @param func  function to apply to each Node pointer along the traversal path
 *              \nDoes not check input. YOLO.
 *              Design this function with only a single Node pointer in mind.
 * @param traverseRoot   Node to start the traversal from
 * @param order order of recursive traversal 
 *              (in-order = 0, pre-order = 1, post-order = -1)
 */
void TBST::traverse(void (*func)(Node*), Node* traverseRoot, int order) {
    if(order == POSTORDER)
        postOrder(func, traverseRoot);
    else if(order == PREORDER)
        preOrder(func, traverseRoot);
    else
        inOrder(func, traverseRoot);
}

// **************** PRIVATE METHODS

void TBST::recursiveCopy(Node* origNode) {
    if(origNode != NULL) { 
        if(origNode->isLeaf()) {
            NodeData* d = origNode->getData();
            insert(d->getToken(), d->getCount());
            d = NULL;
        } else if(!origNode->hasLeftChild()) {
            // 1: have right child, no left child
            // copy the node
            NodeData* d = origNode->getData();
            insert(d->getToken(), d->getCount());
            d = NULL;
            // then recurse down and copy the right child
            recursiveCopy(origNode->getRight());
        } else if(!origNode->hasRightChild()) {
            // 2: have left child, no right child
            NodeData* d = origNode->getData();
            insert(d->getToken(), d->getCount());
            d = NULL;
            // then recurse down and copy the left child
            recursiveCopy(origNode->getLeft());
        } else {
            // 3: have children on both sides
            NodeData* d = origNode->getData();
            insert(d->getToken(), d->getCount());
            d = NULL;
            // then recurse down and copy both children
            recursiveCopy(origNode->getLeft());
            recursiveCopy(origNode->getRight());
        }
    }
}

void TBST::recursiveDelete(Node* node) {
    if (node != NULL) {
        assert(node != NULL);
        if(node->hasLeftChild())
            recursiveDelete(node->getLeft());
        if(node->hasRightChild())
            recursiveDelete(node->getRight());
        delete node;
    }
    node = NULL;
}

// insert helper
bool TBST::insert(Node* node, string token, int frequency) {
    string nodeToken = node->getData()->getToken();
    if (token == nodeToken) {
        node->getData()->increaseCount();
        return true;
    } else if (token < nodeToken) {
        if (node->hasLeftChild()) {
            return insert(node->getLeft(), token, frequency);
        } else {
            try {
                Node* temp = new Node(  token, frequency,
                                        node->getLeft(), node, true, true);
                node->setLeft(temp, false);
                nodeCount++;
                return true;
            } catch(std::bad_alloc& ba) {
                cout << "DEBUG: FAILED to allocate memory for Node" << endl;
                return false;
            }
        }
    } else {
        if (node->hasRightChild()) {
            return insert(node->getRight(), token, frequency);
        } else {
            try {
                Node* temp = new Node(  token, frequency,
                                        node, node->getRight(), true, true);
                node->setRight(temp, false);
                nodeCount++;
                return true;
            } catch(std::bad_alloc& ba) {
                cout << "DEBUG: FAILED to allocate memory for Node" << endl;
                return false;
            }
        }
    }
}

// remove helper
bool TBST::remove(Node* node, string token) {
    string nodeToken = node->getData()->getToken();
    bool left = (token < nodeToken);
    
    Node* temp;
    if (left) {
        if (node->hasLeftChild()) {
            temp = node->getLeft();
        } else {
            return false;
        }
    } else {
        if (node->hasRightChild()) {
            temp = node->getRight();
        } else {
            return false;
        }
    }
    if (token == temp->getData()->getToken()) {
        if (temp->isLeaf()) {
            return rmLeaf(node, left);
        } else if (temp->hasLeftChild() && !temp->hasRightChild()) {
            return rmNodeWithLeft(node, left);
        } else if (temp->hasRightChild() && !temp->hasLeftChild()) {
            return rmNodeWithRight(node, left);
        } else {
            return rmNodeWithBoth(node, left);
        }
    } else {
        return remove(temp, token);
    }
}

bool TBST::rmLeaf(Node* parent, bool left) {
    Node* temp;
    if (left) {
        temp = parent->getLeft();
        parent->setLeft(temp->getLeft(), true);
    } else {
        temp = parent->getRight();
        parent->setRight(temp->getRight(), true);
    }
    // Delete
    delete temp;
    temp = NULL;
    return true;
}

bool TBST::rmNodeWithLeft(Node* parent, bool left) {
    Node* temp;
    if (left) {
        temp = parent->getLeft();
        parent->setLeft(temp->getLeft(), false);
    } else {
        temp = parent->getRight();
        parent->setRight(temp->getLeft(), false);
    }
    // Thread
    Node* temp2 = temp->getLeft();
    while (temp2->hasRightChild()) {
        temp2 = temp2->getRight();
    }
    temp2->setRight(temp->getRight(), temp->isRightThreaded());
    // Delete
    delete temp;
    temp = NULL;
    return true;
}

bool TBST::rmNodeWithRight(Node* parent, bool left) {
    Node* temp;
    if (left) {
        temp = parent->getLeft();
        parent->setLeft(temp->getRight(), false);
    } else {
        temp = parent->getRight();
        parent->setRight(temp->getRight(), false);
    }
    // Thread
    Node* temp2 = temp->getRight();
    while (temp2->hasLeftChild()) {
        temp2 = temp2->getLeft();
    }
    temp2->setLeft(temp->getLeft(), temp->isLeftThreaded());
    // Delete
    delete temp;
    temp = NULL;
    return true;
}

bool TBST::rmNodeWithBoth(Node* parent, bool left) {
    Node* temp;
    if (left) {
        temp = parent->getLeft();
        Node* temp2 = temp->getRight();
        while (temp2->hasLeftChild()) {
            temp2 = temp2->getLeft();
        }
        // If we moved temp2
        if (*(temp->getRight()) != *temp2) {
            // If temp2 doesn't have right children
            if (!temp2->hasRightChild()) {
                temp2->getRight()->setLeft(temp2, true);
            // Go to temp2's parent and set to temp2's child
            } else {
                Node* temp3 = temp2->getRight();
                while (temp3->hasRightChild()) {
                    temp3 = temp3->getRight();
                }
                temp3 = temp3->getRight();
                temp3->setLeft(temp2->getRight(), false);
            }
            // replace temp with temp2 (right side)
            temp2->setRight(temp->getRight(), false);
        }
        // repalce temp with temp2 (left side)
        temp2->setLeft(temp->getLeft(), false);
        parent->setLeft(temp2, false);
        Node* temp3 = temp2->getLeft();
        while (temp3->hasRightChild()) {
            temp3 = temp3->getRight();
        }
        temp3->setRight(temp2, true);
    } else {
        temp = parent->getRight();
        Node* temp2 = temp->getRight();
        while (temp2->hasRightChild()) {
            temp2 = temp2->getRight();
        }
        // If we moved temp2
        if (*(temp->getLeft()) != *temp2) {
            // If temp2 doesn't have left children
            if (!temp2->hasLeftChild()) {
                temp2->getLeft()->setRight(temp2, true);
            // Go to temp2's parent and set to temp2's child
            } else {
                Node* temp3 = temp2->getLeft();
                while (temp3->hasLeftChild()) {
                    temp3 = temp3->getLeft();
                }
                temp3 = temp3->getLeft();
                temp3->setRight(temp2->getLeft(), false);
            }
            // replace temp with temp2 (left side)
            temp2->setLeft(temp->getLeft(), false);
        }
        // replace temp with temp2 (right side)
        temp2->setRight(temp->getRight(), false);
        parent->setRight(temp2, false);
        Node* temp3 = temp2->getRight();
        while (temp3->hasLeftChild()) {
            temp3 = temp3->getLeft();
        }
        temp3->setLeft(temp2, true);
    }
    delete temp;
    temp = NULL;
    return true;
}

// constains helper
bool TBST::contains(Node* node, string token) {
    if (node != NULL && node->getData()->getToken() != token) {
        if (node->getData()->getToken() < token) {
            return contains(node->getRight(), token);
        } else {
            return contains(node->getLeft(), token);
        }
    } else if (node != NULL && node->getData()->getToken() == token) {
        return true;
    } else {
        return false;
    }
}

// pre/in/post order helper
/**
 * @brief BST recursive traversal
 * @details This method traverses the tree starting from the Node specified,
 *          in the order specified.
 * 
 * @param node   Node to start the traversal from
 * @param order order of recursive traversal 
 *              (in-order = 0, pre-order = 1, post-order = -1)
 */
// void TBST::traversal(Node* node, int order) {
//     if (order == PREORDER) {
//         cout << *node << " ";
//         traversal(node->getLeft(), PREORDER);
//         traversal(node->getRight(), PREORDER);
//     } else if (order == INORDER) {
//         traversal(node->getLeft(), INORDER);
//         cout << *node << " ";
//         traversal(node->getRight(), INORDER);
//     } else if (order == POSTORDER) {
//         traversal(node->getLeft(), POSTORDER);
//         traversal(node->getRight(), POSTORDER);
//         cout << *node << " ";
//     }
// }

/**
 * @brief   Processes the tree in-order iteratively.
 * @details Iteratively steps through the tree and execute the specified
 *          function.
 *
 * @param   func pointer to a function that processes the Nodes
 */
void TBST::iterativeInorder(void (*func)(Node*)) {
    Node* curr = root;
    while(curr->getLeft() != NULL)
        curr = curr->getLeft();

    // traverse to the next Node
    while(curr->getRight() != NULL) {
        // if threaded, go right once
        if(!curr->hasRightChild()) {
            curr = curr->getRight();
        } else {
        // if not threaded, go down right once, go left ALLL THE WAYYYYY
            curr = curr->getRight();
            while(curr->getLeft()->hasLeftChild())
                curr = curr->getLeft();
        }
    }
    // done traversing, process now
    func(curr);
}

void TBST::printNode(Node* n) {
    cout << *(n->getData()) << endl;
}

// void TBST::printTree() {
//     iterativeInorder(printNode);
// }

// void TBST::recursivePrintTree() {
//     recursivePrintTree(root, 0);
// }

void TBST::recursivePrintTree() {
    // traverse(printNode, root, 0);
    recursivePrintTree(root, 0);
}

void TBST::recursivePrintTree(Node* node, int level) {
    // cout << *(node->getData()) << endl;
    if(node != NULL) {    
        if(node->hasLeftChild()) {
            // cout << "L" << endl;
            recursivePrintTree(node->getLeft(), level+1);
        }

        for (int i = 0; i < level; ++i)
        {
            cout << "    ";
        }
        cout << *(node->getData()) << "= "; 
        if (node->getLeft() != NULL) {
            cout << *(node->getLeft()->getData()) << node->hasLeftChild() << node->isLeftThreaded() << " ";
        } else {
            cout << "N" << node->isLeftThreaded() << " ";
        }
        if (node->getRight() != NULL) {
            cout << *(node->getRight()->getData()) << node->hasRightChild() << node->isRightThreaded() << " ";
        } else {
            cout << "N" << node->isRightThreaded() << " ";
        }
        cout << endl;

        if(node->hasRightChild()) {
            // cout << "R" << endl;
            recursivePrintTree(node->getRight(), level+1);
        }
    }
}

int TBST::size() {
    return nodeCount;
}

/**
 * @brief public method to retrieve NodeData with minimum secondary value.
 * @return pointer to NodeData with minimum frequency in the tree. NULL if not
 *         found.
 */ 
NodeData* TBST::getMaxByFrequency() {
    return getMaxByFrequency(root);
}

/**
 * @brief Recursively query for max NodeDatas from left/right subtrees
 * and compare.
 * @details private recursive method. Compares maximum candidates from the root
 * node, the left subtree, and the right subtree. O(n) running time.
 * 
 * @param subroot Node pointer to the root of the subtree currently recursed on
 * @return NodeData with maximum secondary value among the 3 candidates
 */
NodeData* TBST::getMaxByFrequency(Node* subroot) {
    if(subroot != NULL) {
        NodeData* maxData = subroot->getData(); // default max
        NodeData* leftMax = getMaxByFrequency(subroot->getLeft());
        NodeData* rightMax = getMaxByFrequency(subroot->getRight());
        if(leftMax != NULL && maxData->getCount() < leftMax->getCount()) {
            maxData = leftMax;
        }
        if(rightMax != NULL && maxData->getCount() < rightMax->getCount()) {
            maxData = rightMax;
        }
        return maxData;
    }
    else return NULL;
}

/**
 * @brief public method to retrieve NodeData with minimum secondary value.
 * @return pointer to NodeData with minimum frequency in the tree. NULL if not
 *         found.
 */ 
NodeData* TBST::getMinByFrequency() {
    return getMinByFrequency(root);
}

/**
 * @brief Recursively query for max NodeDatas from left/right subtrees
 * and compare.
 * @details private recursive method. Compares minimum candidates from the root
 * node, the left subtree, and the right subtree. Runs in O(n) time.
 * 
 * @param subroot Node pointer to the root of the subtree currently recursed on
 * @return NodeData with minimum secondary value among the 3 candidates
 */
NodeData* TBST::getMinByFrequency(Node* subroot) {
    if(subroot != NULL) {
        NodeData* minData = subroot->getData(); // default min
        NodeData* leftMin = getMinByFrequency(subroot->getLeft());
        NodeData* rightMin = getMinByFrequency(subroot->getRight());
        if(leftMin != NULL && minData->getCount() > leftMin->getCount()) {
            minData = leftMin;
        }
        if(rightMin != NULL && minData->getCount() > rightMin->getCount()) {
            minData = rightMin;
        }
        return minData;
    }
    else return NULL;
}

#endif
