Script started on Sat 25 Jan 2014 06:47:29 PM PST
murphs95@uw1-320-10:~/Desktop/Lab2$ g=+[K[K++ -Wall *.cpp
murphs95@uw1-320-10:~/Desktop/Lab2$ valgrind ./a.out
==16123== Memcheck, a memory error detector
==16123== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==16123== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==16123== Command: ./a.out
==16123== 
==16123== Warning: set address range perms: large range [0x19d0d040, 0x2dd0d040) (undefined)
==16123== Warning: set address range perms: large range [0x3959d040, 0x6159d040) (undefined)
==16123== Warning: set address range perms: large range [0x19d0d030, 0x2dd0d050) (noaccess)
==16123== Warning: set address range perms: large range [0x6159e040, 0xb159e040) (undefined)
==16123== Warning: set address range perms: large range [0x3959d030, 0x6159d050) (noaccess)
==16123== Warning: silly arg (-1610612736) to __builtin_vec_new()
**16123** new/new[] failed and should throw an exception, but Valgrind
**16123**    cannot throw exceptions and so is aborting instead.  Sorry.
==16123==    at 0x4C297FE: ??? (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==16123==    by 0x4C2AAEF: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==16123==    by 0x40235C: SortSetArray::increaseSize() (in /net/metis/home2/murphs95/Desktop/Lab2/a.out)
==16123==    by 0x401C13: SortSetArray::insert(int) (in /net/metis/home2/murphs95/Desktop/Lab2/a.out)
==16123==    by 0x400E13: fibArray(int, SortSetArray&) (in /net/metis/home2/murphs95/Desktop/Lab2/a.out)
==16123==    by 0x400C37: main (in /net/metis/home2/murphs95/Desktop/Lab2/a.out)
==16123== 
==16123== HEAP SUMMARY:
==16123==     in use at exit: 1,342,177,296 bytes in 2 blocks
==16123==   total heap usage: 29 allocs, 27 frees, 2,684,354,566 bytes allocated
==16123== 
==16123== LEAK SUMMARY:
==16123==    definitely lost: 0 bytes in 0 blocks
==16123==    indirectly lost: 0 bytes in 0 blocks
==16123==      possibly lost: 0 bytes in 0 blocks
==16123==    still reachable: 1,342,177,296 bytes in 2 blocks
==16123==         suppressed: 0 bytes in 0 blocks
==16123== Rerun with --leak-check=full to see details of leaked memory
==16123== 
==16123== For counts of detected and suppressed errors, rerun with: -v
==16123== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 2 from 2)
murphs95@uw1-320-10:~/Desktop/Lab2$ exit

Script done on Sat 25 Jan 2014 06:49:57 PM PST
